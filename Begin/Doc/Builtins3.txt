     class bool(int)
     |  bool(x) -> bool
     |
     |  Returns True when the argument x is true, False otherwise.
     |  The builtins True and False are the only two instances of the class bool.
     |  The class bool is a subclass of the class int, and cannot be subclassed.
     |
     |  Method resolution order:
     |      bool
     |      int
     |      object
     |
     |  Methods defined here:
     |
     |  __and__(self, value, /)
     |      Return self&value.     |
     |  __new__(*args, **kwargs) from type
     |      Create and return a new object.  See help(type) for accurate signature.     |
     |  __or__(self, value, /)
     |      Return self|value.     |
     |  __rand__(self, value, /)
     |      Return value&self.     |
     |  __repr__(self, /)
     |      Return repr(self).     |
     |  __ror__(self, value, /)
     |      Return value|self.     |
     |  __rxor__(self, value, /)
     |      Return value^self.     |
     |  __str__(self, /)
     |      Return str(self).     |
     |  __xor__(self, value, /)
     |      Return self^value.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from int:
     |
     |  __abs__(self, /)
     |      abs(self)     |
     |  __add__(self, value, /)
     |      Return self+value.     |
     |  __bool__(self, /)
     |      self != 0     |
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.     |
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).     |
     |  __eq__(self, value, /)
     |      Return self==value.     |
     |  __float__(self, /)
     |      float(self)     |
     |  __floor__(...)
     |      Flooring an Integral returns itself.     |
     |  __floordiv__(self, value, /)
     |      Return self//value.     |
     |  __format__(...)
     |      default object formatter     |
     |  __ge__(self, value, /)
     |      Return self>=value.     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).     |
     |  __getnewargs__(...)
     |
     |  __gt__(self, value, /)
     |      Return self>value.     |
     |  __hash__(self, /)
     |      Return hash(self).     |
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use asan index into a list.     |
     |  __int__(self, /)
     |      int(self)     |
     |  __invert__(self, /)
     |      ~self     |
     |  __le__(self, value, /)
     |      Return self<=value.     |
     |  __lshift__(self, value, /)
     |      Return self<<value.     |
     |  __lt__(self, value, /)
     |      Return self<value.     |
     |  __mod__(self, value, /)
     |      Return self%value.     |
     |  __mul__(self, value, /)
     |      Return self*value.     |
     |  __ne__(self, value, /)
     |      Return self!=value.     |
     |  __neg__(self, /)     |      -self
     |
     |  __pos__(self, /)     |      +self
     |
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).     |
     |  __radd__(self, value, /)
     |      Return value+self.     |
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).     |
     |  __rfloordiv__(self, value, /)
     |      Return value//self.     |
     |  __rlshift__(self, value, /)
     |      Return value<<self.     |
     |  __rmod__(self, value, /)
     |      Return value%self.     |
     |  __rmul__(self, value, /)
     |      Return value*self.     |
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.     |
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).     |
     |  __rrshift__(self, value, /)
     |      Return value>>self.     |
     |  __rshift__(self, value, /)
     |      Return self>>value.     |
     |  __rsub__(self, value, /)
     |      Return value-self.     |
     |  __rtruediv__(self, value, /)
     |      Return value/self.     |
     |  __sizeof__(...)
     |      Returns size in memory, in bytes     |
     |  __sub__(self, value, /)
     |      Return self-value.     |
     |  __truediv__(self, value, /)
     |      Return self/value.     |
     |  __trunc__(...)
     |      Truncating an Integral returns itself.     |
     |  bit_length(...)
     |      int.bit_length() -> int
     |
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.     |
     |  from_bytes(...) from type
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |
     |      Return the integer represented by the given array of bytes.     |
     |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).     |
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |
     |      The signed keyword-only argument indicates whether two's complementis
     |      used to represent the integer.
     |
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |
     |      Return an array of bytes representing an integer.
     |
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from int:
     |
     |  denominator
     |      the denominator of a rational number in lowest terms     |
     |  imag
     |      the imaginary part of a complex number     |
     |  numerator
     |      the numerator of a rational number in lowest terms     |
     |  real
     |      the real part of a complex number

        class bytearray(object)
     |  bytearray(iterable_of_ints) -> bytearray
     |  bytearray(string, encoding[, errors]) -> bytearray
     |  bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer
     |  bytearray(int) -> bytes array of size given by the parameter initialized with null bytes
     |  bytearray() -> empty bytes array
     |
     |  Construct a mutable bytearray object from:
     |    - an iterable yielding integers in range(256)
     |    - a text string encoded using the specified encoding
     |    - a bytes or a buffer object
     |    - any object implementing the buffer API.
     |    - an integer
     |
     |  Methods defined here:
     |
     |  __add__(self, value, /)
     |      Return self+value.     |
     |  __alloc__(...)
     |      B.__alloc__() -> int     |
     |      Return the number of bytes actually allocated.     |
     |  __contains__(self, key, /)
     |      Return key in self.     |
     |  __delitem__(self, key, /)
     |      Delete self[key].     |
     |  __eq__(self, value, /)
     |      Return self==value.     |
     |  __ge__(self, value, /)
     |      Return self>=value.     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).     |
     |  __getitem__(self, key, /)
     |      Return self[key].     |
     |  __gt__(self, value, /)
     |      Return self>value.     |
     |  __iadd__(self, value, /)
     |      Implement self+=value.     |
     |  __imul__(self, value, /)
     |      Implement self*=value.     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.     |
     |  __iter__(self, /)
     |      Implement iter(self).     |
     |  __le__(self, value, /)
     |      Return self<=value.     |
     |  __len__(self, /)
     |      Return len(self).     |
     |  __lt__(self, value, /)
     |      Return self<value.     |
     |  __mod__(self, value, /)
     |      Return self%value.     |
     |  __mul__(self, value, /)
     |      Return self*value.n     |
     |  __ne__(self, value, /)
     |      Return self!=value.     |
     |  __new__(*args, **kwargs) from type
     |      Create and return a new object.  See help(type) for accurate signature.     |
     |  __reduce__(self, /)
     |      Return state information for pickling.     |
     |  __reduce_ex__(self, proto=0, /)
     |      Return state information for pickling.     |
     |  __repr__(self, /)
     |      Return repr(self).     |
     |  __rmod__(self, value, /)
     |      Return value%self.     |
     |  __rmul__(self, value, /)
     |      Return self*value.     |
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.     |
     |  __sizeof__(self, /)
     |      Returns the size of the bytearray object in memory, in bytes.     |
     |  __str__(self, /)
     |      Return str(self).     |
     |  append(self, item, /)
     |      Append a single item to the end of the bytearray.     |
     |      item
     |        The item to be appended.
     |
     |  capitalize(...)
     |      B.capitalize() -> copy of B
     |
     |      Return a copy of B with only its first character capitalized (ASCII)
     |      and the rest lower-cased.
     |
     |  center(...)
     |      B.center(width[, fillchar]) -> copy of B     |
     |      Return B centered in a string of length width.  Padding is
     |      done using the specified fill character (default is a space).
     |
     |  clear(self, /)
     |      Remove all items from the bytearray.
     |
     |  copy(self, /)
     |      Return a copy of B.
     |
     |  count(...)
     |      B.count(sub[, start[, end]]) -> int     |
     |      Return the number of non-overlapping occurrences of subsection sub in
     |      bytes B[start:end].  Optional arguments start and end are interpreted
     |      as in slice notation.
     |
     |  decode(self, /, encoding='utf-8', errors='strict')
     |      Decode the bytearray using the codec registered for encoding.
     |
     |      encoding
     |        The encoding with which to decode the bytearray.
     |      errors
     |        The error handling scheme to use for the handling of decoding errors.
     |        The default is 'strict' meaning that decoding errors raise a
     |        UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
     |        as well as any other name registered with codecs.register_error that
     |        can handle UnicodeDecodeErrors.
     |
     |  endswith(...)
     |      B.endswith(suffix[, start[, end]]) -> bool
     |
     |      Return True if B ends with the specified suffix, False otherwise.
     |      With optional start, test B beginning at that position.
     |      With optional end, stop comparing B at that position.
     |      suffix can also be a tuple of bytes to try.
     |
     |  expandtabs(...)
     |      B.expandtabs(tabsize=8) -> copy of B
     |
     |      Return a copy of B where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |
     |  extend(self, iterable_of_ints, /)
     |      Append all the items from the iterator or sequence to the end of the bytearray.
     |
     |      iterable_of_ints
     |        The iterable of items to append.
     |
     |  find(...)
     |      B.find(sub[, start[, end]]) -> int
     |
     |      Return the lowest index in B where subsection sub is found,
     |      such that sub is contained within B[start,end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Return -1 on failure.
     |
     |  fromhex(string, /) from type
     |      Create a bytearray object from a string of hexadecimal numbers.
     |
     |      Spaces between two numbers are accepted.
     |      Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\\xb9\\x01\\xef
')
     |
     |  hex(...)
     |      B.hex() -> string     |
     |      Create a string of hexadecimal numbers from a bytearray object.
     |      Example: bytearray([0xb9, 0x01, 0xef]).hex() -> 'b901ef'.
     |
     |  index(...)
     |      B.index(sub[, start[, end]]) -> int     |
     |      Return the lowest index in B where subsection sub is found,
     |      such that sub is contained within B[start,end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Raises ValueError when the subsection is not found.
     |
     |  insert(self, index, item, /)
     |      Insert a single item into the bytearray before the given index.     |
     |      index
     |        The index where the value is to be inserted.
     |      item
     |        The item to be inserted.
     |     | 
     |  isalnum(...)
     |      B.isalnum() -> bool     |
     |      Return True if all characters in B are alphanumeric
     |      and there is at least one character in B, False otherwise.
     |
     |  isalpha(...)
     |      B.isalpha() -> bool     |
     |      Return True if all characters in B are alphabetic
     |      and there is at least one character in B, False otherwise.
     |
     |  isdigit(...)
     |      B.isdigit() -> bool     |
     |      Return True if all characters in B are digits
     |      and there is at least one character in B, False otherwise.
     |
     |  islower(...)
     |      B.islower() -> bool     |
     |      Return True if all cased characters in B are lowercase and there is
     |      at least one cased character in B, False otherwise.
     |
     |  isspace(...)
     |      B.isspace() -> bool     |
     |      Return True if all characters in B are whitespace
     |      and there is at least one character in B, False otherwise.
     |
     |  istitle(...)
     |      B.istitle() -> bool     |
     |      Return True if B is a titlecased string and there is at least one
     |      character in B, i.e. uppercase characters may only follow uncased
     |      characters and lowercase characters only cased ones. Return False
     |      otherwise.
     |
     |  isupper(...)
     |      B.isupper() -> bool     |
     |      Return True if all cased characters in B are uppercase and there is
     |      at least one cased character in B, False otherwise.
     |
     |  join(self, iterable_of_bytes, /)
     |      Concatenate any number of bytes/bytearray objects.     |
     |      The bytearray whose method is called is inserted in between each pair.     |
     |      The result is returned as a new bytearray object.
     |
     |  ljust(...)
     |      B.ljust(width[, fillchar]) -> copy of B     |
     |      Return B left justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |
     |  lower(...)
     |      B.lower() -> copy of B     |
     |      Return a copy of B with all ASCII characters converted to lowercase.
     |
     |  lstrip(self, bytes=None, /)
     |      Strip leading bytes contained in the argument.     |
     |      If the argument is omitted or None, strip leading ASCII whitespace.
     |
     |  partition(self, sep, /)
     |      Partition the bytearray into three parts using the given separator.     |
     |      This will search for the separator sep in the bytearray. If the separator is
     |      found, returns a 3-tuple containing the part before the separator, the
     |      separator itself, and the part after it as new bytearray objects.     |
     |      If the separator is not found, returns a 3-tuple containing the copy of the
     |      original bytearray object and two empty bytearray objects.
     |
     |  pop(self, index=-1, /)
     |      Remove and return a single item from B.     |
     |        index
     |          The index from where to remove the item.
     |          -1 (the default value) means remove the last item.
     |
     |      If no index argument is given, will pop the last item.
     |
     |  remove(self, value, /)
     |      Remove the first occurrence of a value in the bytearray.     |
     |      value
     |        The value to remove.
     |
     |  replace(self, old, new, count=-1, /)
     |      Return a copy with all occurrences of substring old replaced by new.
     |
     |        count
     |          Maximum number of occurrences to replace.
     |          -1 (the default value) means replace all occurrences.
     |
     |      If the optional argument count is given, only the first count occurrences are
     |      replaced.
     |
     |  reverse(self, /)
     |      Reverse the order of the values in B in place.
     |
     |  rfind(...)
     |      B.rfind(sub[, start[, end]]) -> int
     |
     |      Return the highest index in B where subsection sub is found,
     |      such that sub is contained within B[start,end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Return -1 on failure.
     |
     |  rindex(...)
     |      B.rindex(sub[, start[, end]]) -> int
     |
     |      Return the highest index in B where subsection sub is found,
     |      such that sub is contained within B[start,end].  Optional
     |      arguments start and end are interpreted as in slice notation.     |
     |      Raise ValueError when the subsection is not found.
     |
     |  rjust(...)
     |      B.rjust(width[, fillchar]) -> copy of B     |
     |      Return B right justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |
     |  rpartition(self, sep, /)
     |      Partition the bytearray into three parts using the given separator.
     |
     |      This will search for the separator sep in the bytearray, starting at the end.
     |      If the separator is found, returns a 3-tuple containing the part before the
     |      separator, the separator itself, and the part after it as new bytearray
     |      objects.
     |
     |      If the separator is not found, returns a 3-tuple containing two empty bytearray
     |      objects and the copy of the original bytearray object.
     |
     |  rsplit(self, /, sep=None, maxsplit=-1)
     |      Return a list of the sections in the bytearray, using sep as the delimiter.
     |
     |        sep
     |          The delimiter according which to split the bytearray.
     |          None (the default value) means split on ASCII whitespace characters
     |          (space, tab, return, newline, formfeed, vertical tab).
     |        maxsplit
     |          Maximum number of splits to do.
     |          -1 (the default value) means no limit.
     |
     |      Splitting is done starting at the end of the bytearray and working to the front.
     |
     |  rstrip(self, bytes=None, /)
     |      Strip trailing bytes contained in the argument.
     |
     |      If the argument is omitted or None, strip trailing ASCII whitespace.
     |
     |  split(self, /, sep=None, maxsplit=-1)
     |      Return a list of the sections in the bytearray, using sep as the delimiter.
     |
     |      sep
     |        The delimiter according which to split the bytearray.
     |        None (the default value) means split on ASCII whitespace characters
     |        (space, tab, return, newline, formfeed, vertical tab).
     |      maxsplit
     |        Maximum number of splits to do.
     |        -1 (the default value) means no limit.
     |
     |  splitlines(self, /, keepends=False)
     |      Return a list of the lines in the bytearray, breaking at line boundaries.
     |
     |      Line breaks are not included in the resulting list unless keepends is given and
     |      true.
     |
     |  startswith(...)
     |      B.startswith(prefix[, start[, end]]) -> bool     |
     |      Return True if B starts with the specified prefix, False otherwise.
     |      With optional start, test B beginning at that position.
     |      With optional end, stop comparing B at that position.
     |      prefix can also be a tuple of bytes to try.
     |
     |  strip(self, bytes=None, /)
     |      Strip leading and trailing bytes contained in the argument.     |
     |      If the argument is omitted or None, strip leading and trailing ASCII whitespace.
     |
     |  swapcase(...)
     |      B.swapcase() -> copy of B     |
     |      Return a copy of B with uppercase ASCII characters converted
     |      to lowercase ASCII and vice versa.
     |
     |  title(...)
     |      B.title() -> copy of B     |
     |      Return a titlecased version of B, i.e. ASCII words start with uppercase
     |      characters, all remaining cased characters have lowercase.
     |
     |  translate(self, table, /, delete=b'')
     |      Return a copy with each character mapped by the given translation table.
     |
     |        table
     |          Translation table, which must be a bytes object of length 256.
     |
     |      All characters occurring in the optional argument delete are removed.
     |      The remaining characters are mapped through the given translation table.
     |
     |  upper(...)
     |      B.upper() -> copy of B     |
     |      Return a copy of B with all ASCII characters converted to uppercase.
     |
     |  zfill(...)
     |      B.zfill(width) -> copy of B
     |      Pad a numeric string B with zeros on the left, to fill a field
     |      of the specified width.  B is never truncated.
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  maketrans(frm, to, /)
     |      Return a translation table useable for the bytes or bytearray translate method.     |
     |      The returned table will be one where each byte in frm is mapped to the byte at
     |      the same position in to.     |
     |      The bytes objects frm and to must be of the same length.
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  __hash__ = None

    class bytes(object)
     |  bytes(iterable_of_ints) -> bytes
     |  bytes(string, encoding[, errors]) -> bytes
     |  bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
     |  bytes(int) -> bytes object of size given by the parameter initialized with null bytes
     |  bytes() -> empty bytes object
     |
     |  Construct an immutable array of bytes from:
     |    - an iterable yielding integers in range(256)
     |    - a text string encoded using the specified encoding
     |    - any object implementing the buffer API.
     |    - an integer
     |
     |  Methods defined here:
     |
     |  __add__(self, value, /)
     |      Return self+value.
-- Далее  -- НУ ТЫ ПОНЯЛ... В КАЖДОМ КЛАССЕ ДО ЖОПЫ МЕТОДОВ... КОПАЙ ИНДИВИДУАЛЬНО ПО НЕОБХОДИМОСТИ